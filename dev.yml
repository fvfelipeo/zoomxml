version: '3.8'

services:
  # PostgreSQL Database for Development
  postgres-dev:
    image: postgres:15-alpine
    container_name: zoomxml-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: nfse_metadata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - zoomxml-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d nfse_metadata"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3 Storage for Development
  minio-dev:
    image: minio/minio:latest
    container_name: zoomxml-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    volumes:
      - minio_dev_data:/data
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web Console
    networks:
      - zoomxml-dev-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client for bucket setup
  minio-setup:
    image: minio/mc:latest
    container_name: zoomxml-minio-setup
    depends_on:
      minio-dev:
        condition: service_healthy
    networks:
      - zoomxml-dev-network
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      sleep 5;
      /usr/bin/mc alias set myminio http://minio-dev:9000 admin password123;
      /usr/bin/mc mb myminio/nfse-storage --ignore-existing;
      /usr/bin/mc policy set public myminio/nfse-storage;
      echo 'âœ… MinIO bucket nfse-storage created successfully';
      exit 0;
      "

  # Redis for caching (optional for development)
  redis-dev:
    image: redis:7-alpine
    container_name: zoomxml-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - zoomxml-dev-network
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Adminer for database management
  adminer-dev:
    image: adminer:latest
    container_name: zoomxml-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - zoomxml-dev-network
    depends_on:
      - postgres-dev
    environment:
      ADMINER_DEFAULT_SERVER: postgres-dev

  # ZoomXML Application (Development Mode)
  zoomxml-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: zoomxml-app-dev
    restart: unless-stopped
    depends_on:
      postgres-dev:
        condition: service_healthy
      minio-dev:
        condition: service_healthy
    environment:
      # Application
      APP_NAME: ZoomXML-Dev
      APP_VERSION: 1.0.0-dev
      APP_ENV: development
      APP_DEBUG: true

      # Database
      DB_HOST: postgres-dev
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: password
      DB_NAME: nfse_metadata
      DB_SSLMODE: disable

      # Storage
      MINIO_ENDPOINT: minio-dev:9000
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: password123
      MINIO_BUCKET: nfse-storage
      MINIO_USE_SSL: false

      # Authentication
      JWT_SECRET: development-secret-key-123456789

      # Server
      SERVER_HOST: 0.0.0.0
      PORT: 3000

      # Scheduler
      ENABLE_AUTO_SYNC: true
      DEFAULT_SYNC_INTERVAL: 5m  # More frequent for development
      JOB_PROCESSOR_INTERVAL: 10s

      # Logging
      LOG_LEVEL: debug
      LOG_FORMAT: text
      LOG_OUTPUT: stdout

      # Rate Limiting (more relaxed for development)
      ENABLE_RATE_LIMIT: false
      AUTHENTICATED_RPM: 10000
      HEAVY_OPERATIONS_RPM: 100

      # Development specific
      ENABLE_DEBUG_ENDPOINTS: true
      MOCK_EXTERNAL_APIS: true
    ports:
      - "3000:3000"
    networks:
      - zoomxml-dev-network
    volumes:
      - ./:/app:ro  # Mount source code for hot reload
      - app_dev_logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Mailhog for email testing (development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: zoomxml-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - zoomxml-dev-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: zoomxml-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - zoomxml-dev-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  postgres_dev_data:
    driver: local
  minio_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  app_dev_logs:
    driver: local
  prometheus_dev_data:
    driver: local

networks:
  zoomxml-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
